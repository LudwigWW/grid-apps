"use strict";let gs_kiri_layer=exports;!function(){if(self.kiri||(self.kiri={}),self.kiri.Layer)return;let i=self.kiri,t=self.base.polygons,e=l.prototype,n={};function s(i,t,e,s){let o=n[t];return o||(o=n[t]=e?new THREE.MeshPhongMaterial({transparent:i.transparent,shininess:i.shininess,specular:i.specular,opacity:i.opacity,color:t,side:THREE.DoubleSide}):new THREE.LineBasicMaterial({fog:!1,color:t,linewidth:1})),o}function o(i){return new THREE.Vector3(i.x,i.y,i.z)}function r(i,t,e,n){let s=t.points,h=s.length;if(h<2)return;let l=(null==n?t.isOpen():n)?h-1:h,y=o(s[0]),c=0;for(;c<l;)i.push(y),i.push(y=o(s[++c%h]));e&&t.inner&&t.inner.forEach(function(t){r(i,t,!1,n)})}function h(i,t){t.earcut().forEach(t=>{t.forEachPoint(t=>{i.push(t.x,t.y,t.z)})})}function l(i){this.changed=!1,this.group=null,this.solids=null,this.view=i,this.bycolor={},this.opacity=.15,this.specular=1579032,this.shininess=100,this.transparent=!0}i.Layer=l,i.newLayer=function(i){return new l(i)},e.setOpacity=function(i){this.opacity=i},e.setSpecular=function(i){this.specular=i},e.setShininess=function(i){this.shininess=i},e.setTransparent=function(i){this.transparent=i},e.setVisible=function(i){this.group&&(this.group.visible=i),this.solids&&(this.solids.visible=i)},e.clear=function(){this.changed=!0,this.bycolor={}},e.add=function(i,t){let e=this.bycolor[i];e||(e=this.bycolor[i]=[]),e.push(t)},e.poly=function(i,t,e,n){let s=this;Array.isArray(i)?i.forEach(function(i){s.poly(i,t,e,n)}):(this.add(t,{poly:i,deep:e,open:n}),this.changed=!0)},e.solid=function(i,t){this.add(t,{solid:i}),this.changed=!0},e.noodle=function(i,e,n,s,o){if(!(i=Array.isArray(i)?t.flatten(i,[],!0):t.flatten([i],[],!0)).length)return;let r=i[0].getZ();i.forEach(i=>{let h=[];t.expand([i],e,r-.01,h,1),t.expand([i],-e,r-.01,h,1),t.nest(h).forEach((i,t)=>{this.add(n,{solid:i}),i=i.clone(!0).setZ(r+.01),this.add(s,{poly:i,deep:!0,open:o})})}),this.changed=!0},e.points=function(i,t,e,n){let s=this,r=e/2;i.forEach(function(i){s.lines([o({x:i.x+r,y:i.y+r,z:i.z-r}),o({x:i.x+r,y:i.y+r,z:i.z+r}),o({x:i.x-r,y:i.y+r,z:i.z-r}),o({x:i.x-r,y:i.y+r,z:i.z+r}),o({x:i.x+r,y:i.y-r,z:i.z-r}),o({x:i.x+r,y:i.y-r,z:i.z+r}),o({x:i.x-r,y:i.y-r,z:i.z-r}),o({x:i.x-r,y:i.y-r,z:i.z+r}),o({x:i.x+r,y:i.y+r,z:i.z+r}),o({x:i.x-r,y:i.y+r,z:i.z+r}),o({x:i.x+r,y:i.y+r,z:i.z-r}),o({x:i.x-r,y:i.y+r,z:i.z-r}),o({x:i.x+r,y:i.y-r,z:i.z+r}),o({x:i.x-r,y:i.y-r,z:i.z+r}),o({x:i.x+r,y:i.y-r,z:i.z-r}),o({x:i.x-r,y:i.y-r,z:i.z-r}),o({x:i.x+r,y:i.y+r,z:i.z+r}),o({x:i.x+r,y:i.y-r,z:i.z+r}),o({x:i.x+r,y:i.y+r,z:i.z-r}),o({x:i.x+r,y:i.y-r,z:i.z-r}),o({x:i.x-r,y:i.y+r,z:i.z+r}),o({x:i.x-r,y:i.y-r,z:i.z+r}),o({x:i.x-r,y:i.y+r,z:i.z-r}),o({x:i.x-r,y:i.y-r,z:i.z-r})],t)})},e.lines=function(i,t){this.add(t,{lines:i}),this.changed=!0},e.renderAll=function(){this.renderSolid(),this.render()},e.renderSolid=function(){if(!this.view)return;this.solids&&this.view.remove(this.solids),this.solids=this.view.newGroup();let i=this.bycolor;for(let t in i){if(!i.hasOwnProperty(t))continue;let e=[],n=s(this,parseInt(t),!0);if(i[t].forEach(function(i){i.solid&&h(e,i.solid)}),e.length>0){let i=new THREE.BufferGeometry;i.setAttribute("position",new THREE.BufferAttribute(e.toFloat32(),3)),i.computeFaceNormals(),i.computeVertexNormals();let t=new THREE.Mesh(i,n);t.castShadow=!0,t.receiveShadow=!0,this.solids.add(t)}}},e.render=function(){if(!this.view||!this.changed)return;this.group&&this.view.remove(this.group),this.group=this.view.newGroup();let i,t,e=this.bycolor;for(i in e){if(!e.hasOwnProperty(i))continue;let n=new THREE.Geometry,h=n.vertices,l=s(this,parseInt(i));(t=e[i]).forEach(function(i){i.poly?r(h,i.poly,i.deep,i.open):i.lines&&i.lines.forEach(function(i){h.push(o(i))})}),h.length>0&&this.group.add(new THREE.LineSegments(n,l))}this.changed=!1}}();